<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0"><channel><title>Help Wanted</title><description>Help Wanted Issues</description><link>https://lbonanomi.github.io/rss/feed.xml</link><item>	<title>Compile components on application boot</title>	<link>https://github.com/github/actionview-component/issues/100</link>	<description><![CDATA[In production, it would probably make sense to `compile` all descendents of `ActionView::Component::Base`, so that components render quickly on the first request, instead of compiling lazily ad they do now." ]]></description></item><item>	<title>Add benchmark script</title>	<link>https://github.com/github/actionview-component/issues/99</link>	<description><![CDATA[It would be great to have some form of integration-level benchmark script that we can use to make sure changes to this library are not slowing things down.<br/><br/>I've used https://github.com/evanphx/benchmark-ips in the past, but am open to other options as well." ]]></description></item><item>	<title>Add component generator</title>	<link>https://github.com/github/actionview-component/issues/97</link>	<description><![CDATA[@vinistock I heard you might have made some progress on this. Would you be interested in sharing what you have so far?" ]]></description></item><item>	<title>Support `helpers.` syntax</title>	<link>https://github.com/github/actionview-component/issues/95</link>	<description><![CDATA[It would be wonderful if we could support the `helpers` syntax in components, much like @rafaelfranca added for controllers in https://github.com/rails/rails/pull/24866." ]]></description></item><item>	<title>Remove initializer requirement for Ruby 2.7</title>	<link>https://github.com/github/actionview-component/issues/93</link>	<description><![CDATA[Per https://blog.saeloun.com/2019/09/17/ruby-2-7-module-const-source-location.html, we should be able to remove the requirement of having initializers in Ruby 2.7." ]]></description></item><item>	<title>Better error backtrace</title>	<link>https://github.com/github/actionview-component/issues/85</link>	<description><![CDATA[Motivated by #15 here's one report.<br/><br/>Definitely a nice to have, not entirely important, but would be great to have it.<br/><br/>## Steps to reproduce<br/>1. Render a component on a page<br/>2. Use an inexistent image on the component view<br/><br/>## Expected<br/>Action::View::Template::Error is raised indicating the line in the component view file where the error was raised.<br/><br/>## Actual<br/>Action::View::Template::Error is raised indicating the line in the view file where I rendered the component.<br/><br/>## Example<br/>```<br/>app[web.1]: Completed 500 Internal Server Error in 100ms (ActiveRecord: 44.5ms)
<br/>app[web.1]: DEBUG -- : The asset \"landing_pages/linkedin-icon.png\" is not present in the asset pipeline.<br/>app[web.1]: FATAL -- : ActionView::Template::Error (The asset \"landing_pages/linkedin-icon.png\" is not present in the asset pipeline.)
:<br/>app[web.1]: FATAL -- : <br/>10: [redacted]<br/>11: [redacted]<br/>12:   <% else %><br/>13:     <%= render page_component.component, page_component.locals %><br/>14:   <% end %><br/>15: <% end %><br/>app[web.1]: FATAL -- : app/views/marketing/pages/show.html.erb:13:in `block in _app_views_marketing_pages_show_html_erb___4484640677596836862_47259959656180'<br/><br/>" ]]></description></item><item>	<title>image_url and image_tag ignoring configured asset_host value</title>	<link>https://github.com/github/actionview-component/issues/69</link>	<description><![CDATA[When I call `image_url(\"some_image.png\")
` directly in my views, I am getting a relative path vs a full asset url (which in our case is a CDN)
.<br/><br/>If I call `view_context.image_url(\"some_image.png\")
` it works fine and generates the full url.<br/><br/>Similar issues for `image_tag` which delegates to the same method.<br/><br/>I have temporarily added a `delegate :image_url, :image_tag, to: :view_context` in my component, but this feels wrong.<br/><br/>Is there something I am missing about how to configure this, or is this an actual bug?" ]]></description></item><item>	<title>Allow testing a \"shallow\" render</title>	<link>https://github.com/github/actionview-component/issues/62</link>	<description><![CDATA[Currently it is challenging to test a component without rendering it deeply.  <br/>One thing that makes this challenging is the lack of something like  <a href="https://relishapp.com/rspec/rspec-rails/v/2-2/docs/view-specs/stub-template">rspec's stub_template method</a> 

<br/>It's also impossible to mock `render` on the `controller.view_context` as this is a new instance on every call. <br/><br/>I've found this workaround, but it's rather unwieldy:<br/>```ruby<br/>  let(:instance)
 { MyComponent.new(my_params: 'val')
 }<br/><br/>  before do<br/>    allow(MyComponent)
.to receive(:new)
.and_return(instance)
<br/>    allow(instance)
.to receive(:render)
<br/>  end<br/><br/>  it \"calls render\" do<br/>    render_inline(MyComponent, my_params: 'val')
<br/>    expect(instance)
.to have_received(:render)
.with('catalog/facet_group', param1: 'foo')
<br/>  end<br/>```" ]]></description></item><item>	<title>ActionView::Component previews</title>	<link>https://github.com/github/actionview-component/issues/40</link>	<description><![CDATA[It struck me; AV::Components ought to have previews the same way ActionMailer does.<br/><br/>I realise this might be overkill for a 1.0 release but I'll be happy to throw a first draft together if you folks think it's as good an idea as I do.<br/><br/>Otherwise I might just make it as a gem on its own." ]]></description></item><item>	<title>Allow rendering components in the controller</title>	<link>https://github.com/github/actionview-component/issues/38</link>	<description><![CDATA[Hi @joelhawksley <br/><br/>I am happy to see a view model lib, that integrates smoothly with rails. While playing around with `ActionView::Component` i noticed that it is not possible to render components in the controller. I saw, that you are monkey patching `ActionView::Base#render`. So i tried to override the `render` method in my `ApplicationController` in a similar way, but without success.<br/><br/>At the moment users are forced to write templates with a single line: `<%= render(PostShowComponent, post: @post)
 %>`. It would be great to have an API like this:<br/><br/>```ruby <br/>class PostsController < ApplicationController<br/>  def show <br/>    post = Post.find(params[:id])
<br/>    render(PostShowComponent, post: post)
<br/>  end<br/>end<br/>```<br/>I could provide a PR with a failing feature test, if that helps. <br/><br/>Thank you , ushi<br/><br/>P.S. Found a workaround. Maybe its a good starting point:<br/><br/>```ruby<br/>class ApplicationController<br/>  private<br/><br/>  def render_component(component, args, **options)
<br/>    options = options.reverse_merge(layout: true)
<br/>    render(html: view_context.render(component, args)
, options)
<br/>  end <br/>end<br/>```<br/><br/>" ]]></description></item><item>	<title>Any tips for rendering Components from collections?</title>	<link>https://github.com/github/actionview-component/issues/21</link>	<description><![CDATA[Before I start playing around with this, I wanted to ask if there is a preferred way, best practice, or even a helper to render components for collections  <a href="https://guides.rubyonrails.org/layouts_and_rendering.html#rendering-collections">similar to the rails guide for partials</a> 

<br/><br/>I think this would be a common use case, and would be willing to submit a PR for a documentation example." ]]></description></item><item>	<title>Add Carthage compatibility badge to the README</title>	<link>https://github.com/github/Archimedes/issues/38</link>	<description><![CDATA[Using  <a href="https://github.com/Carthage/Carthage/blob/7a0153cc164e301c46527f6e20c886728a0dc218/README.md#declare-your-compatibility">these instructions</a> 

.<br/>" ]]></description></item><item>	<title>Test that license texts match SPDX plain license texts</title>	<link>https://github.com/github/choosealicense.com/issues/636</link>	<description><![CDATA[We should have a test that each license text in `_licenses` is the same as the plain text license in the SPDX collection to automate the requirement described at https://github.com/github/choosealicense.com/blob/gh-pages/CONTRIBUTING.md#adding-a-license<br/><br/>> The text of the license should match the corresponding text found in  <a href="https://github.com/spdx/license-list-data/blob/master/text/">spdx/license-list-data</a> 

. If there are errors there, please fix them in  <a href="https://github.com/spdx/license-list-XML">spdx/license-list-XML</a> 

 (from which the plain text version is generated)
 so as to minimize license text variation and make it easier for choosealicense.com to eventually consume license texts directly from SPDX.<br/><br/>The test could clone spdx/license-list-data and compare each license we have cataloged in this project. Many existing licenses would probably have to be marked as expected failures due to bugs in SPDX output and discrepancies in how this project has cataloged some licenses. But we should address upfront for any new license cataloged here, and continue to chip away at the existing inconsistencies." ]]></description></item><item>	<title>Annotating license texts with license rules</title>	<link>https://github.com/github/choosealicense.com/issues/441</link>	<description><![CDATA[ <a href="https://github.com/github/choosealicense.com/pull/320#issuecomment-230746990">Comment/question today</a> 

 about whether EUPL-1.1 is accurately described reminded me to file this enhancement idea.<br/><br/>For each license, license rules could be annotated with ranges of text in the license pertinent to the rule. Highlighting of ranges could be turned on/off on individual license pages by selecting in the license rules (permissions/conditions/limitations)
 table. Very crude mockup taking a very simple case (the one condition of MIT)
.<br/><br/>! <a href="https://cloud.githubusercontent.com/assets/40415/16633043/25735510-437c-11e6-84f8-1e504d48f345.png">mit-highlight-condition</a> 

<br/><br/>Obviously this is not a big help for MIT, but for longer licenses, it can be tricky to figure out what bits of the license are pertinent for a particular rule, at least if you only want to read once, which is more already than I suspect most people do.<br/><br/>Such annotations _might_ be very helpful to \"demystify\" licenses, and creating them might be good QA for choosealicense.com license descriptions.<br/><br/>Probably the simplest way to to annotate would be to have one or more full text extracts for each license for each rule, though there are other ways to do it, inline or  <a href="https://github.com/hypothesis/h/wiki/robust-anchors">out of band</a> 

.<br/><br/>Very low priority, may even be a bad idea, just recording it for now.<br/>" ]]></description></item><item>	<title>Add Free Art License</title>	<link>https://github.com/github/choosealicense.com/issues/314</link>	<description><![CDATA[ <a href="http://artlibre.org/licence/lal/en/">Free Art License 1.3</a> 

<br/>" ]]></description></item><item>	<title>I18N</title>	<link>https://github.com/github/choosealicense.com/issues/68</link>	<description><![CDATA[Would love to see about baking in I18N support to choosealicense.com proper. See #67 and #62<br/><br/>We already have the bulk of the strings in a single file (`_config.yml`)
, so it should just be a matter of abstracting out some of our variables, as far as I can tell.<br/><br/>Would love to take this on starting in August if there's interest. Would be a great exercise to set a standard for Jekyll L10N, and can iterate on some of the lessons learned form https://github.com/CMSgov/healthcare.gov.<br/><br/>@parkr any interest?<br/>@dhcole any insight / words of wisdom?<br/>" ]]></description></item><item>	<title>TODO: Configure caching for fast building on travisci</title>	<link>https://github.com/github/government.github.com/issues/750</link>	<description><![CDATA[Description and details here: https://github.com/gjtorikian/html-proofer#configuring-caching and https://github.com/gjtorikian/html-proofer#caching-with-travis" ]]></description></item><item>	<title>Alphabetize, other chores should run monthly, open new PRs automatically</title>	<link>https://github.com/github/government.github.com/issues/601</link>	<description><![CDATA[Currently, the alphabetize script (https://github.com/github/government.github.com/blob/gh-pages/script/alphabetize)
  is run manually to clean up the ordering of Organizations in the various data files. (Example: https://github.com/github/government.github.com/pull/582)
. A couple problems with this:<br/><br/>1. Why do work that a robot 🤖 can do?<br/>2. Since this repo is widely maintained, it's impossible to guarantee that these changes won't create pretty annoying conflicts for other PRs. <br/><br/>Getting these to a near automated fashion would be really cool.<br/><br/>I'd held off merging a bunch of  <a href="https://github.com/github/government.github.com/pulls?utf8=%E2%9C%93&amp;q=is%3Apr%20is%3Aopen%20updated%3A%3E2017-07-01">open PRs</a> 

 in hopes that I'd get time to work on a solution for this, but alas I have not. So, I figure I'll crowd source this to see if anyone has any ideas or fancy the execution.<br/><br/>## Note<br/>I'd love to use  <a href="https://probot.github.io">probot</a> 

 as the framework for these operations (it's what it was made for)
, but it's currently a node app and is expecting j/s scripts. Since I try to do as little with YAML as possible 😉 , this task was never exciting enough to get my attention for very long, and why it floundered. It should be pretty easy as `js-yaml` and basic JS functions should map pretty cleanly.<br/><br/>By opening this issue, this will be a reminder to me to eventually get to it too, so no pressure." ]]></description></item><item>	<title>XML report for CI</title>	<link>https://github.com/github/licensed/issues/52</link>	<description><![CDATA[Hi,<br/><br/>I'm integrating licensed for a poc in our Jenkins pipeline. It could be great to get a report of all licenses checks in an XML formatted file; so we can process it using Jenkins plugins. For now, I have to analyse the `XXX dependencies checked, XXX warnings found.` string formatted output of `licensed status` command.<br/><br/>We can consider **licensed results** as **tests results**.<br/>* If all licenses check passed; then the overall test is **passed**.<br/>* If one license is found as unknown, or not matching any of allowed, ignored or reviewed configs; then the check/test **failed**.<br/><br/>Standards test output formats such as junit, nunit, mstest, google-test, etc. would be great cos already known by many CI tools. Junit is probably the most used one.<br/><br/>Organizing tests in \"groups\" matching the package type (npm, pip, go, etc.)
 and license type (mit, gpl...)
 would also allows to \"count\" the type of licenses found... providing some kind of statistics ^<br/><br/>Example of output in Jenkins test plugin results, processing the XML file could be:<br/>```<br/>Package                  Fail Skip Pass Total<br/>- total                     0    0   69    69<br/>- npm                       0    0   53    53<br/>  - mit                     0    0   45    45<br/>    - package1              0    0    1     1<br/>    - package 2             ...<br/>    - ...<br/>  - apache-2.0                              3<br/>    - package46<br/>    - ...<br/>  - bsd-3-clause                            1 <br/>    - package49<br/>  - isc                                     1<br/>    - package50<br/>  - unknown                                 3<br/>    - package51             1    0    0     1<br/>    - ...<br/>- go                                       16<br/>  - mit                                    14<br/>    - ...<br/>  - isc                                     1<br/>    - ...<br/>  - unknown                                 1<br/>    - packagexx             1    0    0     1<br/>    - ...<br/>```<br/>I did not fill the array; but you've got the point ;-)
<br/><br/>Regards,<br/><br/>Chris" ]]></description></item><item>	<title>Add a yarn dependency source</title>	<link>https://github.com/github/licensed/issues/31</link>	<description><![CDATA[As found in https://github.com/github/licensed/issues/30#issuecomment-386129385<br/><br/>> The errors appear to be because my package.json file is actually intended for yarn, and uses some syntax that is not npm-compatible<br/><br/> <a href="https://yarnpkg.com/">Yarn's</a> 

 `package.json` files attempt to be compatible with NPM `package.json` files but can contain differences that cause the NPM dependency source to fail.<br/><br/>It looks like an indicator that yarn should be used and that npm shouldn't be used is the presence of a `yarn.lock` file." ]]></description></item><item>	<title>Question about tags</title>	<link>https://github.com/github/octocatalog-diff/issues/209</link>	<description><![CDATA[Is there any way to have octocatalog-diff do the opposite of --ignore-tags?  I'd like to be able to specify one or more tags and have octocatalog-diff only compare resources containing those tags?  This would help predict the behavior of running puppet with those tags." ]]></description></item><item>	<title>Consider not using LCS by default or allow switching it off</title>	<link>https://github.com/github/octocatalog-diff/issues/207</link>	<description><![CDATA[Hi,<br/><br/> <a href="https://github.com/github/octocatalog-diff/blob/master/lib/octocatalog-diff/catalog-diff/differ.rb#L525">Hashdiff</a> 

 uses  <a href="https://github.com/liufengyun/hashdiff#use_lcs">LCS by default</a> 

 when comparing arrays. This algorithm produces a friendlier and easier to read diff for humans, but at  <a href="https://github.com/liufengyun/hashdiff/issues/49">high cost</a> 

 O(n<sup>2</sup>)
.<br/><br/>Would you consider a patch to either disable LCS or perhaps to allow switching it off via the command line? I'd happy to prepare it.<br/><br/>Thanks." ]]></description></item><item>	<title>Turn parallel_tests back on for CI</title>	<link>https://github.com/github/octocatalog-diff/issues/164</link>	<description><![CDATA[Recently the CI for octocatalog-diff has been pretty flaky due to random tests getting killed. From travis CI documents, I concluded that the individual tests may be exhausting resources of the container, and as such in https://github.com/github/octocatalog-diff/pull/161 I disabled the parallel_tests gem for CI. Since then, no problems. :crossed_fingers: But, unfortunately the CI build time per ruby version increased by about 5 minutes (20 to 25)
 as a result of this change.<br/><br/>I'm entering this issue to keep track turning this back on. Things that would probably need to be done here would be to evaluate whether the tests can be effectively parallelized (perhaps the spec tests)
 or if the number of simultaneous processes can be reduced to keep from bumping up against any limits that exist.<br/><br/>Right now nobody is actively working on this (there are higher priorities)
. However if test parallelization is something that interests you and you'd like to have a go at making the CI faster, please comment in the issue! 😸 " ]]></description></item><item>	<title>How to use a different puppet configuration (e.g. strict_variables)
</title>	<link>https://github.com/github/octocatalog-diff/issues/158</link>	<description><![CDATA[Hey, I have set `strict_variables` (https://puppet.com/docs/puppet/4.10/configuration.html#strictvariables)
 to true on the puppetmaster. Now I also want this setting to be there for the octocatalog-diff run. Unfortunately I couldn't figure out how I could do that. The only think I could think of would be to add a bootstrapping script which creates a puppet.conf with that setting. But this doesn't feel right :)
<br/><br/>Does someone has an idea how I could do that?" ]]></description></item><item>	<title>Invalid event parameters when setting a reminder</title>	<link>https://github.com/github/opensourcefriday/issues/105</link>	<description><![CDATA[After signing up and clicking on Add to Calendar -> Google Calendar (under Set a reminder)
, getting the following error - <br/>! <a href="https://user-images.githubusercontent.com/6823117/27601277-64e039ce-5b8c-11e7-91d0-6fc0170391ad.png">screen shot 2017-06-27 at 10 57 39 pm</a> 

<br/>" ]]></description></item><item>	<title>delete-empty-repos.sh - Handle Pagination</title>	<link>https://github.com/github/platform-samples/issues/190</link>	<description><![CDATA[ <a href="https://github.com/github/platform-samples/blob/master/api/bash/delete-empty-repos.sh">delete-empty-repos.sh</a> 

 currently works with default pagination of only 30 repositories.<br/><br/>Need to handle pagination in case of more than 30 repositories are within the organization.<br/><br/> <a href="https://developer.github.com/v3/guides/traversing-with-pagination/">Relevant Doc</a> 

" ]]></description></item><item>	<title>Finish migrating to `pathtype` library.</title>	<link>https://github.com/github/semantic/issues/288</link>	<description><![CDATA[The migration to `pathtype` has been overall a pleasant one—it makes functions much more indicative of their purpose, and it’s caught some bugs (though not serious ones)
. Right now we’re an uneasy hybrid of `pathtype` solutions and `FilePath`; we should move off of the latter completely. This involves overhauling `Semantic.CLI` to use `pathtype`; the  <a href="http://hackage.haskell.org/package/pathtype-0.8.1">documentation</a> 

 provides a recipe to make `optparse-applicative` parsers do the right thing (respecting the path semantics; i.e., if we tell a parser to expect an absolute path, the parser will fail unless said path is actually absolute.)
" ]]></description></item><item>	<title>Clojure(Script)
 support</title>	<link>https://github.com/github/semantic/issues/217</link>	<description><![CDATA[Any possibility of adding Clojure/ClojureScript support?" ]]></description></item><item>	<title>Don't connect to kext when invoked with CLI args</title>	<link>https://github.com/github/SoftU2F/issues/39</link>	<description><![CDATA[We try to connect to the kext when the app starts ( <a href="https://github.com/github/SoftU2F/blob/45825a5bd6e6bad7ae9bd681c8584cbcb6e7fb7b/SoftU2FTool/U2FHID.swift#L24">code</a> 

)
. This also happens when the app is launched from the command line (Eg. for deleting/listing registrations)
. If the app is already running in the background we'll get an error because the kext only allows one connection. This error is surfaced to the user, which is confusing. We should not connect to the kext unless we need to." ]]></description></item></channel></rss>
