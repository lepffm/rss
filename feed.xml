<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0"><channel><title>Help Wanted</title><description>Help Wanted Issues</description><link>https://lbonanomi.github.io/rss/feed.xml</link><item>	<title>Include test case class for components</title>	<link>https://github.com/github/actionview-component/issues/109</link>	<description><![CDATA[Here is what I'm currently using on my `test_helper.rb` file.<br/><br/>```ruby<br/>class ActionView::ComponentTest < ActiveSupport::TestCase<br/>  include ActionView::Component::TestHelpers<br/>end<br/>```<br/><br/>I think it's a good idea to provide this base for class for testing components." ]]></description></item><item>	<title>Compile components on application boot</title>	<link>https://github.com/github/actionview-component/issues/100</link>	<description><![CDATA[In production, it would probably make sense to `compile` all descendents of `ActionView::Component::Base`, so that components render quickly on the first request, instead of compiling lazily as they do now." ]]></description></item><item>	<title>Add benchmark script</title>	<link>https://github.com/github/actionview-component/issues/99</link>	<description><![CDATA[It would be great to have some form of integration-level benchmark script that we can use to make sure changes to this library are not slowing things down.<br/><br/>I've used https://github.com/evanphx/benchmark-ips in the past, but am open to other options as well." ]]></description></item><item>	<title>Remove initializer requirement for Ruby 2.7</title>	<link>https://github.com/github/actionview-component/issues/93</link>	<description><![CDATA[Per https://blog.saeloun.com/2019/09/17/ruby-2-7-module-const-source-location.html, we should be able to remove the requirement of having initializers in Ruby 2.7." ]]></description></item><item>	<title>Better error backtrace</title>	<link>https://github.com/github/actionview-component/issues/85</link>	<description><![CDATA[Motivated by #15 here's one report.<br/><br/>Definitely a nice to have, not entirely important, but would be great to have it.<br/><br/>## Steps to reproduce<br/>1. Render a component on a page<br/>2. Use an inexistent image on the component view<br/><br/>## Expected<br/>Action::View::Template::Error is raised indicating the line in the component view file where the error was raised.<br/><br/>## Actual<br/>Action::View::Template::Error is raised indicating the line in the view file where I rendered the component.<br/><br/>## Example<br/>```<br/>app[web.1]: Completed 500 Internal Server Error in 100ms (ActiveRecord: 44.5ms)
<br/>app[web.1]: DEBUG -- : The asset \"landing_pages/linkedin-icon.png\" is not present in the asset pipeline.<br/>app[web.1]: FATAL -- : ActionView::Template::Error (The asset \"landing_pages/linkedin-icon.png\" is not present in the asset pipeline.)
:<br/>app[web.1]: FATAL -- : <br/>10: [redacted]<br/>11: [redacted]<br/>12:   <% else %><br/>13:     <%= render page_component.component, page_component.locals %><br/>14:   <% end %><br/>15: <% end %><br/>app[web.1]: FATAL -- : app/views/marketing/pages/show.html.erb:13:in `block in _app_views_marketing_pages_show_html_erb___4484640677596836862_47259959656180'<br/><br/>" ]]></description></item><item>	<title>image_url and image_tag ignoring configured asset_host value</title>	<link>https://github.com/github/actionview-component/issues/69</link>	<description><![CDATA[When I call `image_url(\"some_image.png\")
` directly in my views, I am getting a relative path vs a full asset url (which in our case is a CDN)
.<br/><br/>If I call `view_context.image_url(\"some_image.png\")
` it works fine and generates the full url.<br/><br/>Similar issues for `image_tag` which delegates to the same method.<br/><br/>I have temporarily added a `delegate :image_url, :image_tag, to: :view_context` in my component, but this feels wrong.<br/><br/>Is there something I am missing about how to configure this, or is this an actual bug?" ]]></description></item><item>	<title>Allow rendering components in the controller</title>	<link>https://github.com/github/actionview-component/issues/38</link>	<description><![CDATA[Hi @joelhawksley <br/><br/>I am happy to see a view model lib, that integrates smoothly with rails. While playing around with `ActionView::Component` i noticed that it is not possible to render components in the controller. I saw, that you are monkey patching `ActionView::Base#render`. So i tried to override the `render` method in my `ApplicationController` in a similar way, but without success.<br/><br/>At the moment users are forced to write templates with a single line: `<%= render(PostShowComponent, post: @post)
 %>`. It would be great to have an API like this:<br/><br/>```ruby <br/>class PostsController < ApplicationController<br/>  def show <br/>    post = Post.find(params[:id])
<br/>    render(PostShowComponent, post: post)
<br/>  end<br/>end<br/>```<br/>I could provide a PR with a failing feature test, if that helps. <br/><br/>Thank you , ushi<br/><br/>P.S. Found a workaround. Maybe its a good starting point:<br/><br/>```ruby<br/>class ApplicationController<br/>  private<br/><br/>  def render_component(component, args, **options)
<br/>    options = options.reverse_merge(layout: true)
<br/>    render(html: view_context.render(component, args)
, options)
<br/>  end <br/>end<br/>```<br/><br/>" ]]></description></item><item>	<title>Any tips for rendering Components from collections?</title>	<link>https://github.com/github/actionview-component/issues/21</link>	<description><![CDATA[Before I start playing around with this, I wanted to ask if there is a preferred way, best practice, or even a helper to render components for collections  <a href="https://guides.rubyonrails.org/layouts_and_rendering.html#rendering-collections">similar to the rails guide for partials</a> 

<br/><br/>I think this would be a common use case, and would be willing to submit a PR for a documentation example." ]]></description></item><item>	<title>Clojure(Script)
 support</title>	<link>https://github.com/github/semantic/issues/217</link>	<description><![CDATA[Any possibility of adding Clojure/ClojureScript support?" ]]></description></item><item>	<title>Playlist randomly stops</title>	<link>https://github.com/grafana/grafana/issues/20429</link>	<description><![CDATA[I created a playlist with 8 graphs. After starting the playlist, it stops after about four graphs and it notifies me of unsaved changed and asks if I want to save or discard.<br/><br/>**Environment**:<br/>- Grafana version: v6.2.5<br/>- User OS &amp; Browser: 3.19.0-32-generic #37~14.04.1-Ubuntu SMP i686 athlon Firefox<br/>" ]]></description></item><item>	<title>grafana/toolkit: console.log in dev mode throws lint error</title>	<link>https://github.com/grafana/grafana/issues/20425</link>	<description><![CDATA[Hi Dominik,<br/><br/>I understand that console.log is not allowed in build mode but in dev mode, it's more easy use it to debug<br/><br/>$ yarn dev<br/>yarn run v1.19.1<br/>$ grafana-toolkit plugin:dev<br/>âˆš Prettier check<br/>- Linting<br/><br/>  ERROR: /plugin.ts[318:6]: Calls to 'console.info' are not allowed.<br/><br/><br/>BR,<br/>Arnaud<br/>" ]]></description></item><item>	<title>Show an error when different provisioning providers have the same name</title>	<link>https://github.com/grafana/grafana/issues/20421</link>	<description><![CDATA[**What would you like to be added**: A check when loading providers for dashboard provisioners that enforces unique names, as  <a href="https://grafana.com/docs/administration/provisioning/#dashboards">specified in the documentation</a> 

.<br/><br/>**Why is this needed**: If someone does not pay much attention to the documentation and does not see that the provisioning provider names must be unique, a weird problem can appear: some dashboards are randomly not found. They might not appear in the interface, or it might show a \"dashboard not found\" error.<br/><br/>I believe what's happening is that Grafana must be overwriting the provider settings, the paths for provisioning are overwritten too and it makes Grafana delete dashboards when it does not find them in one of the paths, and then add them again when it finds them in the other one.<br/><br/>I think this is very low priority as the unique provider name is documented, but it would be nice to have something in the logs that tells us we made a mistake. I'm also posting this issue in case someone has the same problem as me (for example, I stumbled upon #14929 and #16016 which can be related)
.<br/>" ]]></description></item><item>	<title>Docs: Building Grafana from source 404 link</title>	<link>https://github.com/grafana/grafana/issues/20410</link>	<description><![CDATA[getting a 404 on the contributor developer guide --> https://grafana.com/docs/project/building_from_source/contributedeveloper-guide.md<br/><br/>Should link to https://github.com/grafana/grafana/blob/master/contribute/developer-guide.md" ]]></description></item><item>	<title>Self signed certificates</title>	<link>https://github.com/grafana/grafana-image-renderer/issues/33</link>	<description><![CDATA[I tested the render plugin against a Grafana instance with self signed certificate. I got the following error:<br/>Error: net::ERR_CERT_COMMON_NAME_INVALID<br/><br/>Would be nice with a config parameter to trust unsigned certificates as that's probably the issue." ]]></description></item><item>	<title>Color of diff changes when scrolling up and down</title>	<link>https://github.com/grafana/tanka/issues/82</link>	<description><![CDATA[Example: https://www.youtube.com/watch?v=1UKlgCK2EeM<br/>" ]]></description></item><item>	<title>Make tanka available as kubectl plugin</title>	<link>https://github.com/grafana/tanka/issues/45</link>	<description><![CDATA[Looking at this project, I think it should be possible to make this interface with the kubectl plugins and distribute via krew.<br/>https://github.com/kubernetes-sigs/krew<br/><br/>Let me know what you think! " ]]></description></item></channel></rss>
