<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0"><channel><title>Help Wanted</title><description>Help Wanted Issues</description><link>https://lbonanomi.github.io/rss/feed.xml</link><item>	<title>Version 1.5.2 on Rails 6.0.1 causing deprecation warning</title>	<link>https://github.com/github/actionview-component/issues/135</link>	<description><![CDATA[Rails 6.0.1<br/>Gem version 1.5.2<br/><br/>In config/application.rb,<br/>`require \"action_view/component\"`<br/><br/>Causing: <br/>```<br/>DEPRECATION WARNING: Initialization autoloaded the constants ActionText::ContentHelper and ActionText::TagHelper.<br/><br/>Being able to do this is deprecated. Autoloading during initialization is going<br/>to be an error condition in future versions of Rails.<br/><br/>Reloading does not reboot the application, and therefore code executed during<br/>initialization does not run again. So, if you reload ActionText::ContentHelper, for example,<br/>the expected changes won't be reflected in that stale Module object.<br/><br/>These autoloaded constants have been unloaded.<br/><br/>Please, check the \"Autoloading and Reloading Constants\" guide for solutions.<br/> (called from <main> at /Users/<br/>USER/Projects/rails-app-test/config/environment.rb:5)
<br/>```<br/>at `development.log`<br/><br/>Which is highly difficult to track<br/><br/>Related issue https://github.com/rails/rails/issues/36546 " ]]></description></item><item>	<title>V2 Roadmap - Contributions welcome!</title>	<link>https://github.com/github/actionview-component/issues/132</link>	<description><![CDATA[üëã hello folks!<br/><br/>As we look towards upstreaming our work on `actionview-component` into Rails, it feels like it might be time to think about working towards a major release.<br/><br/>I've added the `v2` label to issues we think would make sense to get in ahead of this release: https://github.com/github/actionview-component/issues?q=is%3Aissue+is%3Aopen+label%3Av2<br/><br/>I'd love to hear what you think we should be sure to include in V2 ‚ù§Ô∏è " ]]></description></item><item>	<title>Remove fallback support for old render syntax</title>	<link>https://github.com/github/actionview-component/issues/131</link>	<description><![CDATA[We have two cases where we support old syntax in `actionview-component`:<br/><br/>https://github.com/github/actionview-component/blob/1164a2e7eba2de8e0808be27a77c0495fad23d26/lib/action_view/component/monkey_patch.rb#L10<br/><br/>https://github.com/github/actionview-component/blob/master/lib/action_view/component/test_helpers.rb#L20<br/><br/>Let's remove these cases and the associated tests, merging right before we cut `v2.0.0`." ]]></description></item><item>	<title>Allow rendering components in the controller</title>	<link>https://github.com/github/actionview-component/issues/38</link>	<description><![CDATA[Hi @joelhawksley <br/><br/>I am happy to see a view model lib, that integrates smoothly with rails. While playing around with `ActionView::Component` i noticed that it is not possible to render components in the controller. I saw, that you are monkey patching `ActionView::Base#render`. So i tried to override the `render` method in my `ApplicationController` in a similar way, but without success.<br/><br/>At the moment users are forced to write templates with a single line: `<%= render(PostShowComponent, post: @post)
 %>`. It would be great to have an API like this:<br/><br/>```ruby <br/>class PostsController < ApplicationController<br/>  def show <br/>    post = Post.find(params[:id])
<br/>    render(PostShowComponent, post: post)
<br/>  end<br/>end<br/>```<br/>I could provide a PR with a failing feature test, if that helps. <br/><br/>Thank you , ushi<br/><br/>P.S. Found a workaround. Maybe its a good starting point:<br/><br/>```ruby<br/>class ApplicationController<br/>  private<br/><br/>  def render_component(component, args, **options)
<br/>    options = options.reverse_merge(layout: true)
<br/>    render(html: view_context.render(component, args)
, options)
<br/>  end <br/>end<br/>```<br/><br/>" ]]></description></item><item>	<title>Wanted: Experience Reports</title>	<link>https://github.com/github/actionview-component/issues/15</link>	<description><![CDATA[üëã thanks for checking out `actionview-component`!<br/><br/>In sharing this gem with the Rails community, we are looking to hear about your experiences with using `ActionView::Component` in your applications.<br/><br/>Please let us know what works well, what doesn't, and what you think is missing ‚ù§Ô∏è <br/><br/>If you'd rather provide feedback privately, feel free to contact me at joelhawksley@github.com." ]]></description></item><item>	<title>Improved user experience: choosealicense.com/appendix</title>	<link>https://github.com/github/choosealicense.com/issues/703</link>	<description><![CDATA[First, I really love this page:  <a href="https://choosealicense.com/appendix">https://choosealicense.com/appendix</a> 

<br/><br/>One way it can be improved is to include some \"yes/no/undefined\" check-boxes along the top of the table.<br/>When you eg: check the box above: \"Same License\" it brings all \"same licenses\" to the top &amp; grays out all other licenses.<br/>* If you check several boxes, only those licenses with ALL checked conditions are highlighted.<br/>* Below those (partially grayed out, or something)
 are licenses that partially match the check-boxes (in decreasing number of matches)
.<br/>* And below that too is the remaining licenses, totally grayed out.<br/><br/>That would make this page awesome to use.<br/>Thanks &amp; hope this helps." ]]></description></item><item>	<title>Test that license texts match SPDX plain license texts</title>	<link>https://github.com/github/choosealicense.com/issues/636</link>	<description><![CDATA[We should have a test that each license text in `_licenses` is the same as the plain text license in the SPDX collection to automate the requirement described at https://github.com/github/choosealicense.com/blob/gh-pages/CONTRIBUTING.md#adding-a-license<br/><br/>> The text of the license should match the corresponding text found in  <a href="https://github.com/spdx/license-list-data/blob/master/text/">spdx/license-list-data</a> 

. If there are errors there, please fix them in  <a href="https://github.com/spdx/license-list-XML">spdx/license-list-XML</a> 

 (from which the plain text version is generated)
 so as to minimize license text variation and make it easier for choosealicense.com to eventually consume license texts directly from SPDX.<br/><br/>The test could clone spdx/license-list-data and compare each license we have cataloged in this project. Many existing licenses would probably have to be marked as expected failures due to bugs in SPDX output and discrepancies in how this project has cataloged some licenses. But we should address upfront for any new license cataloged here, and continue to chip away at the existing inconsistencies." ]]></description></item></channel></rss>
