<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0"><channel><title>Help Wanted</title><description>Help Wanted Issues</description><link>https://lbonanomi.github.io/rss/feed.xml</link><item>	<title>Allow rendering components in the controller</title>	<link>https://github.com/github/actionview-component/issues/38</link>	<description><![CDATA[Hi @joelhawksley <br/><br/>I am happy to see a view model lib, that integrates smoothly with rails. While playing around with `ActionView::Component` i noticed that it is not possible to render components in the controller. I saw, that you are monkey patching `ActionView::Base#render`. So i tried to override the `render` method in my `ApplicationController` in a similar way, but without success.<br/><br/>At the moment users are forced to write templates with a single line: `<%= render(PostShowComponent, post: @post)
 %>`. It would be great to have an API like this:<br/><br/>```ruby <br/>class PostsController < ApplicationController<br/>  def show <br/>    post = Post.find(params[:id])
<br/>    render(PostShowComponent, post: post)
<br/>  end<br/>end<br/>```<br/>I could provide a PR with a failing feature test, if that helps. <br/><br/>Thank you , ushi<br/><br/>P.S. Found a workaround. Maybe its a good starting point:<br/><br/>```ruby<br/>class ApplicationController<br/>  private<br/><br/>  def render_component(component, args, **options)
<br/>    options = options.reverse_merge(layout: true)
<br/>    render(html: view_context.render(component, args)
, options)
<br/>  end <br/>end<br/>```<br/><br/>" ]]></description></item><item>	<title>Finish migrating to `pathtype` library.</title>	<link>https://github.com/github/semantic/issues/288</link>	<description><![CDATA[The migration to `pathtype` has been overall a pleasant oneâ€”it makes functions much more indicative of their purpose, and itâ€™s caught some bugs (though not serious ones)
. Right now weâ€™re an uneasy hybrid of `pathtype` solutions and `FilePath`; we should move off of the latter completely. This involves overhauling `Semantic.CLI` to use `pathtype`; the  <a href="http://hackage.haskell.org/package/pathtype-0.8.1">documentation</a> 

 provides a recipe to make `optparse-applicative` parsers do the right thing (respecting the path semantics; i.e., if we tell a parser to expect an absolute path, the parser will fail unless said path is actually absolute.)
" ]]></description></item><item>	<title>Registry addon config</title>	<link>https://github.com/ubuntu/microk8s/issues/926</link>	<description><![CDATA[Hello, since dealing with microk8s for some time now, I would like to ask if the registry can be configured to use less than the default 20GB space. <br/>In other words, is it known the location of the predefined .yaml manifest files that start the addons?" ]]></description></item><item>	<title>Suggestion: create a yaru libreoffice icon theme</title>	<link>https://github.com/ubuntu/yaru/issues/1815</link>	<description><![CDATA[This is not a bug, but I thinks it should be great to have a yaru icon theme for libreoffice, which actually looks very inconsistent with the rest of the OS :<br/><br/>Elementary icons looks too much \"Elementary\"<br/>! <a href="https://user-images.githubusercontent.com/36476595/73187408-a5d2c000-4121-11ea-9fea-c8744d27c124.png">elementary</a> 

<br/><br/>Breeze icons (which at the moment seems to me to be the most neutral)
 looks too much \"KDE\"<br/>! <a href="https://user-images.githubusercontent.com/36476595/73187463-ba16bd00-4121-11ea-9d3f-3337abcd58b2.png">breeze</a> 

<br/><br/>And Colibre icons are just too \"Windows\" ðŸ˜ˆ<br/>! <a href="https://user-images.githubusercontent.com/36476595/73187647-02ce7600-4122-11ea-9773-1f418817c74a.png">colibre</a> 

<br/><br/>I know it's a lot of work, so this is just a suggestion.<br/>" ]]></description></item></channel></rss>
