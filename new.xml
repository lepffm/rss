<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0"><channel><title>Help Wanted</title><description>Help Wanted Issues</description><link>https://lbonanomi.github.io/rss/feed.xml</link><item>	<title>Compile components on application boot</title>	<link>https://github.com/github/actionview-component/issues/100</link>	<description><![CDATA[In production, it would probably make sense to `compile` all descendents of `ActionView::Component::Base`, so that components render quickly on the first request, instead of compiling lazily ad they do now." ]]></description></item><item>	<title>Add benchmark script</title>	<link>https://github.com/github/actionview-component/issues/99</link>	<description><![CDATA[It would be great to have some form of integration-level benchmark script that we can use to make sure changes to this library are not slowing things down.\n\nI've used https://github.com/evanphx/benchmark-ips in the past, but am open to other options as well." ]]></description></item><item>	<title>Add component generator</title>	<link>https://github.com/github/actionview-component/issues/97</link>	<description><![CDATA[@vinistock I heard you might have made some progress on this. Would you be interested in sharing what you have so far?" ]]></description></item><item>	<title>Support `helpers.` syntax</title>	<link>https://github.com/github/actionview-component/issues/95</link>	<description><![CDATA[It would be wonderful if we could support the `helpers` syntax in components, much like @rafaelfranca added for controllers in https://github.com/rails/rails/pull/24866." ]]></description></item><item>	<title>Remove initializer requirement for Ruby 2.7</title>	<link>https://github.com/github/actionview-component/issues/93</link>	<description><![CDATA[Per https://blog.saeloun.com/2019/09/17/ruby-2-7-module-const-source-location.html, we should be able to remove the requirement of having initializers in Ruby 2.7." ]]></description></item><item>	<title>Better error backtrace</title>	<link>https://github.com/github/actionview-component/issues/85</link>	<description><![CDATA[Motivated by #15 here's one report.\n\nDefinitely a nice to have, not entirely important, but would be great to have it.\n\n## Steps to reproduce\n1. Render a component on a page\n2. Use an inexistent image on the component view\n\n## Expected\nAction::View::Template::Error is raised indicating the line in the component view file where the error was raised.\n\n## Actual\nAction::View::Template::Error is raised indicating the line in the view file where I rendered the component.\n\n## Example\n```\napp[web.1]: Completed 500 Internal Server Error in 100ms (ActiveRecord: 44.5ms)
\napp[web.1]: DEBUG -- : The asset \"landing_pages/linkedin-icon.png\" is not present in the asset pipeline.\napp[web.1]: FATAL -- : ActionView::Template::Error (The asset \"landing_pages/linkedin-icon.png\" is not present in the asset pipeline.)
:\napp[web.1]: FATAL -- : \n10: [redacted]\n11: [redacted]\n12:   <% else %>\n13:     <%= render page_component.component, page_component.locals %>\n14:   <% end %>\n15: <% end %>\napp[web.1]: FATAL -- : app/views/marketing/pages/show.html.erb:13:in `block in _app_views_marketing_pages_show_html_erb___4484640677596836862_47259959656180'\n\n" ]]></description></item><item>	<title>image_url and image_tag ignoring configured asset_host value</title>	<link>https://github.com/github/actionview-component/issues/69</link>	<description><![CDATA[When I call `image_url(\"some_image.png\")
` directly in my views, I am getting a relative path vs a full asset url (which in our case is a CDN)
.\n\nIf I call `view_context.image_url(\"some_image.png\")
` it works fine and generates the full url.\n\nSimilar issues for `image_tag` which delegates to the same method.\n\nI have temporarily added a `delegate :image_url, :image_tag, to: :view_context` in my component, but this feels wrong.\n\nIs there something I am missing about how to configure this, or is this an actual bug?" ]]></description></item><item>	<title>Allow testing a \"shallow\" render</title>	<link>https://github.com/github/actionview-component/issues/62</link>	<description><![CDATA[Currently it is challenging to test a component without rendering it deeply.  \nOne thing that makes this challenging is the lack of something like  <a href="https://relishapp.com/rspec/rspec-rails/v/2-2/docs/view-specs/stub-template">rspec's stub_template method</a> 

\nIt's also impossible to mock `render` on the `controller.view_context` as this is a new instance on every call. \n\nI've found this workaround, but it's rather unwieldy:\n```ruby\n  let(:instance)
 { MyComponent.new(my_params: 'val')
 }\n\n  before do\n    allow(MyComponent)
.to receive(:new)
.and_return(instance)
\n    allow(instance)
.to receive(:render)
\n  end\n\n  it \"calls render\" do\n    render_inline(MyComponent, my_params: 'val')
\n    expect(instance)
.to have_received(:render)
.with('catalog/facet_group', param1: 'foo')
\n  end\n```" ]]></description></item><item>	<title>Allow rendering components in the controller</title>	<link>https://github.com/github/actionview-component/issues/38</link>	<description><![CDATA[Hi @joelhawksley \n\nI am happy to see a view model lib, that integrates smoothly with rails. While playing around with `ActionView::Component` i noticed that it is not possible to render components in the controller. I saw, that you are monkey patching `ActionView::Base#render`. So i tried to override the `render` method in my `ApplicationController` in a similar way, but without success.\n\nAt the moment users are forced to write templates with a single line: `<%= render(PostShowComponent, post: @post)
 %>`. It would be great to have an API like this:\n\n```ruby \nclass PostsController < ApplicationController\n  def show \n    post = Post.find(params[:id])
\n    render(PostShowComponent, post: post)
\n  end\nend\n```\nI could provide a PR with a failing feature test, if that helps. \n\nThank you , ushi\n\nP.S. Found a workaround. Maybe its a good starting point:\n\n```ruby\nclass ApplicationController\n  private\n\n  def render_component(component, args, **options)
\n    options = options.reverse_merge(layout: true)
\n    render(html: view_context.render(component, args)
, options)
\n  end \nend\n```\n\n" ]]></description></item><item>	<title>Any tips for rendering Components from collections?</title>	<link>https://github.com/github/actionview-component/issues/21</link>	<description><![CDATA[Before I start playing around with this, I wanted to ask if there is a preferred way, best practice, or even a helper to render components for collections  <a href="https://guides.rubyonrails.org/layouts_and_rendering.html#rendering-collections">similar to the rails guide for partials</a> 

\n\nI think this would be a common use case, and would be willing to submit a PR for a documentation example." ]]></description></item><item>	<title>Question about tags</title>	<link>https://github.com/github/octocatalog-diff/issues/209</link>	<description><![CDATA[Is there any way to have octocatalog-diff do the opposite of --ignore-tags?  I'd like to be able to specify one or more tags and have octocatalog-diff only compare resources containing those tags?  This would help predict the behavior of running puppet with those tags." ]]></description></item><item>	<title>Consider not using LCS by default or allow switching it off</title>	<link>https://github.com/github/octocatalog-diff/issues/207</link>	<description><![CDATA[Hi,\n\n <a href="https://github.com/github/octocatalog-diff/blob/master/lib/octocatalog-diff/catalog-diff/differ.rb#L525">Hashdiff</a> 

 uses  <a href="https://github.com/liufengyun/hashdiff#use_lcs">LCS by default</a> 

 when comparing arrays. This algorithm produces a friendlier and easier to read diff for humans, but at  <a href="https://github.com/liufengyun/hashdiff/issues/49">high cost</a> 

 O(n<sup>2</sup>)
.\n\nWould you consider a patch to either disable LCS or perhaps to allow switching it off via the command line? I'd happy to prepare it.\n\nThanks." ]]></description></item><item>	<title>Clojure(Script)
 support</title>	<link>https://github.com/github/semantic/issues/217</link>	<description><![CDATA[Any possibility of adding Clojure/ClojureScript support?" ]]></description></item></channel></rss>
